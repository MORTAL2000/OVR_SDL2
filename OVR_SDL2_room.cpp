// Copyright (c) 2014 Robert Kooima
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <vector>

#include "OVR_SDL2_room.hpp"

//------------------------------------------------------------------------------

/// The scene is defined as a collection of colored, axis-aligned boxes. Each
/// has a minimum and maximum extent along X, Y, and Z, plus an RGB color.

struct block
{
    float x0;
    float y0;
    float z0;

    float x1;
    float y1;
    float z1;

    float r;
    float g;
    float b;
};

struct block blocks[] = {
    { +5.900, -0.000, -8.900, +6.200, +0.300, +3.000, 0.90, 0.90, 0.90, },
    { -6.200, -0.000, -8.900, -5.900, +0.300, +3.000, 0.90, 0.90, 0.90, },
    { +5.300, -0.000, -9.200, +6.200, +0.300, -8.900, 0.90, 0.90, 0.90, },
    { -6.200, -0.000, -9.200, +1.700, +0.300, -8.900, 0.90, 0.90, 0.90, },
    { +1.345, +2.500, -2.732, +1.529, +2.569, -2.448, 0.80, 0.80, 0.80, },
    { +0.955, +2.490, -2.971, +1.705, +2.510, -2.221, 0.35, 0.35, 1.00, },
    { -0.269, +2.600, -3.671, +0.269, +3.350, -3.571, 0.80, 0.80, 0.80, },
    { -0.500, +2.500, -3.846, +0.500, +2.600, -3.096, 0.80, 0.80, 0.80, },
    { -0.686, +2.500, -2.817, +0.686, +2.551, -2.363, 0.80, 0.80, 0.80, },
    { -1.067, +2.960, -3.614, +1.067, +4.470, -3.448, 0.80, 0.80, 0.80, },
    { -6.000, +8.000, -9.000, +6.000, +9.000, +3.000, 0.80, 0.80, 0.80, },
    { +5.900, +3.800, -3.700, +6.000, +4.000, -3.500, 0.65, 0.51, 0.22, },
    { +5.900, +3.800, -0.500, +6.000, +4.000, -0.300, 0.65, 0.51, 0.22, },
    { +5.900, +3.800, -3.500, +6.000, +4.000, -0.500, 0.65, 0.51, 0.22, },
    { +5.900, +6.000, -3.700, +6.000, +6.200, -3.500, 0.65, 0.51, 0.22, },
    { +5.900, +6.000, -0.500, +6.000, +6.200, -0.300, 0.65, 0.51, 0.22, },
    { +5.900, +6.000, -3.500, +6.000, +6.200, -0.500, 0.65, 0.51, 0.22, },
    { +5.900, +4.000, -3.700, +6.000, +6.000, -3.500, 0.65, 0.51, 0.22, },
    { +5.900, +4.000, -0.500, +6.000, +6.000, -0.300, 0.65, 0.51, 0.22, },
    { +5.950, +4.000, -3.500, +6.000, +6.000, -0.500, 0.91, 0.75, 0.36, },
    { -0.568, +1.100, -0.686, +0.568, +1.400, -0.631, 0.91, 0.81, 0.43, },
    { -0.568, +1.100, +0.631, +0.568, +1.400, +0.686, 0.91, 0.81, 0.43, },
    { +0.631, +1.100, -0.568, +0.686, +1.400, +0.568, 0.91, 0.81, 0.43, },
    { -0.686, +1.100, -0.568, -0.631, +1.400, +0.568, 0.91, 0.81, 0.43, },
    { +2.648, +2.000, -4.133, +2.733, +2.300, -1.867, 0.65, 0.51, 0.22, },
    { -2.733, +2.000, -4.133, -2.648, +2.300, -1.867, 0.65, 0.51, 0.22, },
    { -2.549, +2.000, -4.317, +2.549, +2.300, -4.232, 0.65, 0.51, 0.22, },
    { -2.549, +2.000, -1.768, +2.549, +2.300, -1.683, 0.65, 0.51, 0.22, },
    { -0.568, +2.303, +0.633, +0.568, +2.665, +0.684, 0.91, 0.81, 0.43, },
    { -0.568, +2.784, +0.633, +0.568, +3.145, +0.684, 0.91, 0.81, 0.43, },
    { +0.568, +1.500, +0.568, +0.750, +3.215, +0.750, 0.91, 0.81, 0.43, },
    { -0.750, +1.500, +0.568, -0.568, +3.215, +0.750, 0.91, 0.81, 0.43, },
    { +0.568, +0.000, -0.750, +0.750, +1.400, -0.568, 0.91, 0.81, 0.43, },
    { -0.750, +0.000, -0.750, -0.568, +1.400, -0.568, 0.91, 0.81, 0.43, },
    { +0.568, +0.000, +0.568, +0.750, +1.400, +0.750, 0.91, 0.81, 0.43, },
    { -0.750, +0.000, +0.568, -0.568, +1.400, +0.750, 0.91, 0.81, 0.43, },
    { -0.805, +1.400, -0.805, +0.805, +1.500, +0.750, 0.91, 0.81, 0.43, },
    { +2.549, +0.000, -4.416, +2.832, +2.300, -4.133, 0.65, 0.51, 0.22, },
    { -2.832, +0.000, -4.416, -2.549, +2.300, -4.133, 0.65, 0.51, 0.22, },
    { +2.549, +0.000, -1.867, +2.832, +2.300, -1.584, 0.65, 0.51, 0.22, },
    { -2.832, +0.000, -1.867, -2.549, +2.300, -1.584, 0.65, 0.51, 0.22, },
    { -3.000, +2.300, -4.500, +3.000, +2.500, -1.500, 0.65, 0.51, 0.22, },
    { +6.000, +0.300, -9.000, +6.200, +9.000, +3.000, 0.39, 0.75, 0.59, },
    { +1.700, +7.050, -9.200, +5.300, +9.000, -9.000, 0.39, 0.75, 0.59, },
    { +5.300, +0.300, -9.200, +6.200, +9.000, -9.000, 0.39, 0.75, 0.59, },
    { -6.200, +0.300, -9.200, +1.700, +9.000, -9.000, 0.39, 0.75, 0.59, },
    { -6.200, +6.800, -7.800, -6.000, +9.000, -5.200, 0.39, 0.75, 0.59, },
    { -6.200, +6.800, -4.300, -6.000, +9.000, -1.700, 0.39, 0.75, 0.59, },
    { -6.200, +6.800, -0.800, -6.000, +9.000, +1.800, 0.39, 0.75, 0.59, },
    { -6.200, +0.300, -9.000, -6.000, +9.000, -7.800, 0.39, 0.75, 0.59, },
    { -6.200, +0.300, +1.800, -6.000, +9.000, +3.000, 0.39, 0.75, 0.59, },
    { -6.200, +0.300, -5.200, -6.000, +9.000, -4.300, 0.39, 0.75, 0.59, },
    { -6.200, +0.300, -1.700, -6.000, +9.000, -0.800, 0.39, 0.75, 0.59, },
    { -6.200, +0.300, -7.800, -6.000, +1.700, -5.200, 0.39, 0.75, 0.59, },
    { -6.200, +0.300, -4.300, -6.000, +1.700, -1.700, 0.39, 0.75, 0.59, },
    { -6.200, +0.300, -0.800, -6.000, +1.700, +1.800, 0.39, 0.75, 0.59, },
    { -6.070, +4.098, -0.500, -5.930, +4.202, +1.500, 0.90, 0.90, 0.90, },
    { -6.070, +4.098, -7.500, -5.930, +4.202, -5.500, 0.90, 0.90, 0.90, },
    { -6.070, +4.098, -4.000, -5.930, +4.202, -2.000, 0.90, 0.90, 0.90, },
    { -6.200, +1.700, -0.800, -5.626, +2.000, -0.500, 0.90, 0.90, 0.90, },
    { -6.200, +1.700, +1.500, -5.626, +2.000, +1.800, 0.90, 0.90, 0.90, },
    { -6.200, +1.700, -0.500, -5.626, +2.000, +1.500, 0.90, 0.90, 0.90, },
    { -6.200, +6.500, -0.800, -5.800, +6.800, -0.500, 0.90, 0.90, 0.90, },
    { -6.200, +6.500, +1.500, -5.800, +6.800, +1.800, 0.90, 0.90, 0.90, },
    { -6.200, +6.500, -0.500, -5.800, +6.800, +1.500, 0.90, 0.90, 0.90, },
    { -6.200, +2.000, -0.800, -5.800, +6.500, -0.500, 0.90, 0.90, 0.90, },
    { -6.200, +2.000, +1.500, -5.800, +6.500, +1.800, 0.90, 0.90, 0.90, },
    { -6.200, +1.700, -7.800, -5.626, +2.000, -7.500, 0.90, 0.90, 0.90, },
    { -6.200, +1.700, -5.500, -5.626, +2.000, -5.200, 0.90, 0.90, 0.90, },
    { -6.200, +1.700, -7.500, -5.626, +2.000, -5.500, 0.90, 0.90, 0.90, },
    { -6.200, +6.500, -7.800, -5.800, +6.800, -7.500, 0.90, 0.90, 0.90, },
    { -6.200, +6.500, -5.500, -5.800, +6.800, -5.200, 0.90, 0.90, 0.90, },
    { -6.200, +6.500, -7.500, -5.800, +6.800, -5.500, 0.90, 0.90, 0.90, },
    { -6.200, +2.000, -7.800, -5.800, +6.500, -7.500, 0.90, 0.90, 0.90, },
    { -6.200, +2.000, -5.500, -5.800, +6.500, -5.200, 0.90, 0.90, 0.90, },
    { -6.200, +1.700, -4.300, -5.626, +2.000, -4.000, 0.90, 0.90, 0.90, },
    { -6.200, +1.700, -2.000, -5.626, +2.000, -1.700, 0.90, 0.90, 0.90, },
    { -6.200, +1.700, -4.000, -5.626, +2.000, -2.000, 0.90, 0.90, 0.90, },
    { -6.200, +6.500, -4.300, -5.800, +6.800, -4.000, 0.90, 0.90, 0.90, },
    { -6.200, +6.500, -2.000, -5.800, +6.800, -1.700, 0.90, 0.90, 0.90, },
    { -6.200, +6.500, -4.000, -5.800, +6.800, -2.000, 0.90, 0.90, 0.90, },
    { -6.200, +2.000, -4.300, -5.800, +6.500, -4.000, 0.90, 0.90, 0.90, },
    { -6.200, +2.000, -2.000, -5.800, +6.500, -1.700, 0.90, 0.90, 0.90, },
    { +5.000, +6.750, -9.200, +5.300, +7.050, -8.900, 0.90, 0.90, 0.90, },
    { +1.700, +6.750, -9.200, +2.000, +7.050, -8.900, 0.90, 0.90, 0.90, },
    { +2.000, +6.750, -9.200, +5.000, +7.050, -8.900, 0.90, 0.90, 0.90, },
    { +5.000, -0.000, -9.200, +5.300, +6.750, -8.900, 0.90, 0.90, 0.90, },
    { +1.700, -0.000, -9.200, +2.000, +6.750, -8.900, 0.90, 0.90, 0.90, },
    { +2.000, +0.000, -9.200, +5.000, +6.750, -9.000, 0.80, 0.00, 0.00, },
    { -6.000, -1.000, -9.000, -5.000, +0.000, -8.000, 0.70, 0.70, 0.70, },
    { -6.000, -1.000, -8.000, -5.000, +0.000, -7.000, 0.30, 0.30, 0.30, },
    { -5.000, -1.000, -9.000, -4.000, +0.000, -8.000, 0.30, 0.30, 0.30, },
    { -5.000, -1.000, -8.000, -4.000, +0.000, -7.000, 0.70, 0.70, 0.70, },
    { +4.000, -1.000, -9.000, +5.000, +0.000, -8.000, 0.70, 0.70, 0.70, },
    { +4.000, -1.000, -8.000, +5.000, +0.000, -7.000, 0.30, 0.30, 0.30, },
    { +5.000, -1.000, -9.000, +6.000, +0.000, -8.000, 0.30, 0.30, 0.30, },
    { +5.000, -1.000, -8.000, +6.000, +0.000, -7.000, 0.70, 0.70, 0.70, },
    { +0.000, -1.000, -9.000, +1.000, +0.000, -8.000, 0.70, 0.70, 0.70, },
    { +0.000, -1.000, -8.000, +1.000, +0.000, -7.000, 0.30, 0.30, 0.30, },
    { +1.000, -1.000, -9.000, +2.000, +0.000, -8.000, 0.30, 0.30, 0.30, },
    { +1.000, -1.000, -8.000, +2.000, +0.000, -7.000, 0.70, 0.70, 0.70, },
    { +2.000, -1.000, -9.000, +3.000, +0.000, -8.000, 0.70, 0.70, 0.70, },
    { +2.000, -1.000, -8.000, +3.000, +0.000, -7.000, 0.30, 0.30, 0.30, },
    { +3.000, -1.000, -9.000, +4.000, +0.000, -8.000, 0.30, 0.30, 0.30, },
    { +3.000, -1.000, -8.000, +4.000, +0.000, -7.000, 0.70, 0.70, 0.70, },
    { -4.000, -1.000, -9.000, -3.000, +0.000, -8.000, 0.70, 0.70, 0.70, },
    { -4.000, -1.000, -8.000, -3.000, +0.000, -7.000, 0.30, 0.30, 0.30, },
    { -3.000, -1.000, -9.000, -2.000, +0.000, -8.000, 0.30, 0.30, 0.30, },
    { -3.000, -1.000, -8.000, -2.000, +0.000, -7.000, 0.70, 0.70, 0.70, },
    { -2.000, -1.000, -9.000, -1.000, +0.000, -8.000, 0.70, 0.70, 0.70, },
    { -2.000, -1.000, -8.000, -1.000, +0.000, -7.000, 0.30, 0.30, 0.30, },
    { -1.000, -1.000, -9.000, +0.000, +0.000, -8.000, 0.30, 0.30, 0.30, },
    { -1.000, -1.000, -8.000, +0.000, +0.000, -7.000, 0.70, 0.70, 0.70, },
    { -6.000, -1.000, +1.000, -5.000, +0.000, +2.000, 0.70, 0.70, 0.70, },
    { -6.000, -1.000, +2.000, -5.000, +0.000, +3.000, 0.30, 0.30, 0.30, },
    { -5.000, -1.000, +1.000, -4.000, +0.000, +2.000, 0.30, 0.30, 0.30, },
    { -5.000, -1.000, +2.000, -4.000, +0.000, +3.000, 0.70, 0.70, 0.70, },
    { +4.000, -1.000, +1.000, +5.000, +0.000, +2.000, 0.70, 0.70, 0.70, },
    { +4.000, -1.000, +2.000, +5.000, +0.000, +3.000, 0.30, 0.30, 0.30, },
    { +5.000, -1.000, +1.000, +6.000, +0.000, +2.000, 0.30, 0.30, 0.30, },
    { +5.000, -1.000, +2.000, +6.000, +0.000, +3.000, 0.70, 0.70, 0.70, },
    { +0.000, -1.000, +1.000, +1.000, +0.000, +2.000, 0.70, 0.70, 0.70, },
    { +0.000, -1.000, +2.000, +1.000, +0.000, +3.000, 0.30, 0.30, 0.30, },
    { +1.000, -1.000, +1.000, +2.000, +0.000, +2.000, 0.30, 0.30, 0.30, },
    { +1.000, -1.000, +2.000, +2.000, +0.000, +3.000, 0.70, 0.70, 0.70, },
    { +2.000, -1.000, +1.000, +3.000, +0.000, +2.000, 0.70, 0.70, 0.70, },
    { +2.000, -1.000, +2.000, +3.000, +0.000, +3.000, 0.30, 0.30, 0.30, },
    { +3.000, -1.000, +1.000, +4.000, +0.000, +2.000, 0.30, 0.30, 0.30, },
    { +3.000, -1.000, +2.000, +4.000, +0.000, +3.000, 0.70, 0.70, 0.70, },
    { -4.000, -1.000, +1.000, -3.000, +0.000, +2.000, 0.70, 0.70, 0.70, },
    { -4.000, -1.000, +2.000, -3.000, +0.000, +3.000, 0.30, 0.30, 0.30, },
    { -3.000, -1.000, +1.000, -2.000, +0.000, +2.000, 0.30, 0.30, 0.30, },
    { -3.000, -1.000, +2.000, -2.000, +0.000, +3.000, 0.70, 0.70, 0.70, },
    { -2.000, -1.000, +1.000, -1.000, +0.000, +2.000, 0.70, 0.70, 0.70, },
    { -2.000, -1.000, +2.000, -1.000, +0.000, +3.000, 0.30, 0.30, 0.30, },
    { -1.000, -1.000, +1.000, +0.000, +0.000, +2.000, 0.30, 0.30, 0.30, },
    { -1.000, -1.000, +2.000, +0.000, +0.000, +3.000, 0.70, 0.70, 0.70, },
    { -6.000, -1.000, -3.000, -5.000, +0.000, -2.000, 0.70, 0.70, 0.70, },
    { -6.000, -1.000, -2.000, -5.000, +0.000, -1.000, 0.30, 0.30, 0.30, },
    { -5.000, -1.000, -3.000, -4.000, +0.000, -2.000, 0.30, 0.30, 0.30, },
    { -5.000, -1.000, -2.000, -4.000, +0.000, -1.000, 0.70, 0.70, 0.70, },
    { -6.000, -1.000, -1.000, -5.000, +0.000, +0.000, 0.70, 0.70, 0.70, },
    { -6.000, -1.000, +0.000, -5.000, +0.000, +1.000, 0.30, 0.30, 0.30, },
    { -5.000, -1.000, -1.000, -4.000, +0.000, +0.000, 0.30, 0.30, 0.30, },
    { -5.000, -1.000, +0.000, -4.000, +0.000, +1.000, 0.70, 0.70, 0.70, },
    { -6.000, -1.000, -7.000, -5.000, +0.000, -6.000, 0.70, 0.70, 0.70, },
    { -6.000, -1.000, -6.000, -5.000, +0.000, -5.000, 0.30, 0.30, 0.30, },
    { -5.000, -1.000, -7.000, -4.000, +0.000, -6.000, 0.30, 0.30, 0.30, },
    { -5.000, -1.000, -6.000, -4.000, +0.000, -5.000, 0.70, 0.70, 0.70, },
    { -6.000, -1.000, -5.000, -5.000, +0.000, -4.000, 0.70, 0.70, 0.70, },
    { -6.000, -1.000, -4.000, -5.000, +0.000, -3.000, 0.30, 0.30, 0.30, },
    { -5.000, -1.000, -5.000, -4.000, +0.000, -4.000, 0.30, 0.30, 0.30, },
    { -5.000, -1.000, -4.000, -4.000, +0.000, -3.000, 0.70, 0.70, 0.70, },
    { +4.000, -1.000, -3.000, +5.000, +0.000, -2.000, 0.70, 0.70, 0.70, },
    { +4.000, -1.000, -2.000, +5.000, +0.000, -1.000, 0.30, 0.30, 0.30, },
    { +5.000, -1.000, -3.000, +6.000, +0.000, -2.000, 0.30, 0.30, 0.30, },
    { +5.000, -1.000, -2.000, +6.000, +0.000, -1.000, 0.70, 0.70, 0.70, },
    { +4.000, -1.000, -1.000, +5.000, +0.000, +0.000, 0.70, 0.70, 0.70, },
    { +4.000, -1.000, +0.000, +5.000, +0.000, +1.000, 0.30, 0.30, 0.30, },
    { +5.000, -1.000, -1.000, +6.000, +0.000, +0.000, 0.30, 0.30, 0.30, },
    { +5.000, -1.000, +0.000, +6.000, +0.000, +1.000, 0.70, 0.70, 0.70, },
    { +4.000, -1.000, -7.000, +5.000, +0.000, -6.000, 0.70, 0.70, 0.70, },
    { +4.000, -1.000, -6.000, +5.000, +0.000, -5.000, 0.30, 0.30, 0.30, },
    { +5.000, -1.000, -7.000, +6.000, +0.000, -6.000, 0.30, 0.30, 0.30, },
    { +5.000, -1.000, -6.000, +6.000, +0.000, -5.000, 0.70, 0.70, 0.70, },
    { +4.000, -1.000, -5.000, +5.000, +0.000, -4.000, 0.70, 0.70, 0.70, },
    { +4.000, -1.000, -4.000, +5.000, +0.000, -3.000, 0.30, 0.30, 0.30, },
    { +5.000, -1.000, -5.000, +6.000, +0.000, -4.000, 0.30, 0.30, 0.30, },
    { +5.000, -1.000, -4.000, +6.000, +0.000, -3.000, 0.70, 0.70, 0.70, },
    { +0.000, -1.000, -3.000, +1.000, +0.000, -2.000, 0.70, 0.70, 0.70, },
    { +0.000, -1.000, -2.000, +1.000, +0.000, -1.000, 0.30, 0.30, 0.30, },
    { +1.000, -1.000, -3.000, +2.000, +0.000, -2.000, 0.30, 0.30, 0.30, },
    { +1.000, -1.000, -2.000, +2.000, +0.000, -1.000, 0.70, 0.70, 0.70, },
    { +0.000, -1.000, -1.000, +1.000, +0.000, +0.000, 0.70, 0.70, 0.70, },
    { +0.000, -1.000, +0.000, +1.000, +0.000, +1.000, 0.30, 0.30, 0.30, },
    { +1.000, -1.000, -1.000, +2.000, +0.000, +0.000, 0.30, 0.30, 0.30, },
    { +1.000, -1.000, +0.000, +2.000, +0.000, +1.000, 0.70, 0.70, 0.70, },
    { +2.000, -1.000, -3.000, +3.000, +0.000, -2.000, 0.70, 0.70, 0.70, },
    { +2.000, -1.000, -2.000, +3.000, +0.000, -1.000, 0.30, 0.30, 0.30, },
    { +3.000, -1.000, -3.000, +4.000, +0.000, -2.000, 0.30, 0.30, 0.30, },
    { +3.000, -1.000, -2.000, +4.000, +0.000, -1.000, 0.70, 0.70, 0.70, },
    { +2.000, -1.000, -1.000, +3.000, +0.000, +0.000, 0.70, 0.70, 0.70, },
    { +2.000, -1.000, +0.000, +3.000, +0.000, +1.000, 0.30, 0.30, 0.30, },
    { +3.000, -1.000, -1.000, +4.000, +0.000, +0.000, 0.30, 0.30, 0.30, },
    { +3.000, -1.000, +0.000, +4.000, +0.000, +1.000, 0.70, 0.70, 0.70, },
    { -4.000, -1.000, -3.000, -3.000, +0.000, -2.000, 0.70, 0.70, 0.70, },
    { -4.000, -1.000, -2.000, -3.000, +0.000, -1.000, 0.30, 0.30, 0.30, },
    { -3.000, -1.000, -3.000, -2.000, +0.000, -2.000, 0.30, 0.30, 0.30, },
    { -3.000, -1.000, -2.000, -2.000, +0.000, -1.000, 0.70, 0.70, 0.70, },
    { -4.000, -1.000, -1.000, -3.000, +0.000, +0.000, 0.70, 0.70, 0.70, },
    { -4.000, -1.000, +0.000, -3.000, +0.000, +1.000, 0.30, 0.30, 0.30, },
    { -3.000, -1.000, -1.000, -2.000, +0.000, +0.000, 0.30, 0.30, 0.30, },
    { -3.000, -1.000, +0.000, -2.000, +0.000, +1.000, 0.70, 0.70, 0.70, },
    { -2.000, -1.000, -3.000, -1.000, +0.000, -2.000, 0.70, 0.70, 0.70, },
    { -2.000, -1.000, -2.000, -1.000, +0.000, -1.000, 0.30, 0.30, 0.30, },
    { -1.000, -1.000, -3.000, +0.000, +0.000, -2.000, 0.30, 0.30, 0.30, },
    { -1.000, -1.000, -2.000, +0.000, +0.000, -1.000, 0.70, 0.70, 0.70, },
    { -2.000, -1.000, -1.000, -1.000, +0.000, +0.000, 0.70, 0.70, 0.70, },
    { -2.000, -1.000, +0.000, -1.000, +0.000, +1.000, 0.30, 0.30, 0.30, },
    { -1.000, -1.000, -1.000, +0.000, +0.000, +0.000, 0.30, 0.30, 0.30, },
    { -1.000, -1.000, +0.000, +0.000, +0.000, +1.000, 0.70, 0.70, 0.70, },
    { +0.000, -1.000, -7.000, +1.000, +0.000, -6.000, 0.70, 0.70, 0.70, },
    { +0.000, -1.000, -6.000, +1.000, +0.000, -5.000, 0.30, 0.30, 0.30, },
    { +1.000, -1.000, -7.000, +2.000, +0.000, -6.000, 0.30, 0.30, 0.30, },
    { +1.000, -1.000, -6.000, +2.000, +0.000, -5.000, 0.70, 0.70, 0.70, },
    { +0.000, -1.000, -5.000, +1.000, +0.000, -4.000, 0.70, 0.70, 0.70, },
    { +0.000, -1.000, -4.000, +1.000, +0.000, -3.000, 0.30, 0.30, 0.30, },
    { +1.000, -1.000, -5.000, +2.000, +0.000, -4.000, 0.30, 0.30, 0.30, },
    { +1.000, -1.000, -4.000, +2.000, +0.000, -3.000, 0.70, 0.70, 0.70, },
    { +2.000, -1.000, -7.000, +3.000, +0.000, -6.000, 0.70, 0.70, 0.70, },
    { +2.000, -1.000, -6.000, +3.000, +0.000, -5.000, 0.30, 0.30, 0.30, },
    { +3.000, -1.000, -7.000, +4.000, +0.000, -6.000, 0.30, 0.30, 0.30, },
    { +3.000, -1.000, -6.000, +4.000, +0.000, -5.000, 0.70, 0.70, 0.70, },
    { +2.000, -1.000, -5.000, +3.000, +0.000, -4.000, 0.70, 0.70, 0.70, },
    { +2.000, -1.000, -4.000, +3.000, +0.000, -3.000, 0.30, 0.30, 0.30, },
    { +3.000, -1.000, -5.000, +4.000, +0.000, -4.000, 0.30, 0.30, 0.30, },
    { +3.000, -1.000, -4.000, +4.000, +0.000, -3.000, 0.70, 0.70, 0.70, },
    { -4.000, -1.000, -7.000, -3.000, +0.000, -6.000, 0.70, 0.70, 0.70, },
    { -4.000, -1.000, -6.000, -3.000, +0.000, -5.000, 0.30, 0.30, 0.30, },
    { -3.000, -1.000, -7.000, -2.000, +0.000, -6.000, 0.30, 0.30, 0.30, },
    { -3.000, -1.000, -6.000, -2.000, +0.000, -5.000, 0.70, 0.70, 0.70, },
    { -4.000, -1.000, -5.000, -3.000, +0.000, -4.000, 0.70, 0.70, 0.70, },
    { -4.000, -1.000, -4.000, -3.000, +0.000, -3.000, 0.30, 0.30, 0.30, },
    { -3.000, -1.000, -5.000, -2.000, +0.000, -4.000, 0.30, 0.30, 0.30, },
    { -3.000, -1.000, -4.000, -2.000, +0.000, -3.000, 0.70, 0.70, 0.70, },
    { -2.000, -1.000, -7.000, -1.000, +0.000, -6.000, 0.70, 0.70, 0.70, },
    { -2.000, -1.000, -6.000, -1.000, +0.000, -5.000, 0.30, 0.30, 0.30, },
    { -1.000, -1.000, -7.000, +0.000, +0.000, -6.000, 0.30, 0.30, 0.30, },
    { -1.000, -1.000, -6.000, +0.000, +0.000, -5.000, 0.70, 0.70, 0.70, },
    { -2.000, -1.000, -5.000, -1.000, +0.000, -4.000, 0.70, 0.70, 0.70, },
    { -2.000, -1.000, -4.000, -1.000, +0.000, -3.000, 0.30, 0.30, 0.30, },
    { -1.000, -1.000, -5.000, +0.000, +0.000, -4.000, 0.30, 0.30, 0.30, },
    { -1.000, -1.000, -4.000, +0.000, +0.000, -3.000, 0.70, 0.70, 0.70, },
};

//------------------------------------------------------------------------------

/// Triangulate and append the vertices of a block face onto the vertex array.
///
/// @param p0     Position vector
/// @param p1     Position vector
/// @param p2     Position vector
/// @param p3     Position vector
/// @param n      Normal vector
/// @param c      Color

void OVR_SDL2_room::make_face(vec3 p0, vec3 p1, vec3 p2, vec3 p3, vec3 n, vec3 c)
{
    verts.push_back(vert(p0, n, c));
    verts.push_back(vert(p1, n, c));
    verts.push_back(vert(p2, n, c));

    verts.push_back(vert(p0, n, c));
    verts.push_back(vert(p2, n, c));
    verts.push_back(vert(p3, n, c));
}

/// Append the vertices of an axis-aligned block onto the vertex array.
///
/// @param p0     Minimum position vector
/// @param p1     Maximum position vector
/// @param c      Color

void OVR_SDL2_room::make_block(vec3 p0, vec3 p1, vec3 c)
{
    make_face(vec3(p1[0], p1[1], p1[2]),
              vec3(p1[0], p0[1], p1[2]),
              vec3(p1[0], p0[1], p0[2]),
              vec3(p1[0], p1[1], p0[2]), vec3(+1, 0, 0), c);

    make_face(vec3(p0[0], p1[1], p0[2]),
              vec3(p0[0], p0[1], p0[2]),
              vec3(p0[0], p0[1], p1[2]),
              vec3(p0[0], p1[1], p1[2]), vec3(-1, 0, 0), c);

    make_face(vec3(p0[0], p1[1], p0[2]),
              vec3(p0[0], p1[1], p1[2]),
              vec3(p1[0], p1[1], p1[2]),
              vec3(p1[0], p1[1], p0[2]), vec3(0, +1, 0), c);

    make_face(vec3(p0[0], p0[1], p1[2]),
              vec3(p0[0], p0[1], p0[2]),
              vec3(p1[0], p0[1], p0[2]),
              vec3(p1[0], p0[1], p1[2]), vec3(0, -1, 0), c);

    make_face(vec3(p0[0], p1[1], p1[2]),
              vec3(p0[0], p0[1], p1[2]),
              vec3(p1[0], p0[1], p1[2]),
              vec3(p1[0], p1[1], p1[2]), vec3(0, 0, +1), c);

    make_face(vec3(p1[0], p1[1], p0[2]),
              vec3(p1[0], p0[1], p0[2]),
              vec3(p0[0], p0[1], p0[2]),
              vec3(p0[0], p1[1], p0[2]), vec3(0, 0, -1), c);
}

//------------------------------------------------------------------------------

/// Initialize the room demo.

OVR_SDL2_room::OVR_SDL2_room()
{
    const size_t stride = sizeof (vert);

    // Converting the array of colored blocks into a list of triangles.

    for (int i = 0; i < sizeof (blocks) / sizeof (blocks[0]); i++)

        make_block(vec3(blocks[i].x0, blocks[i].y0, blocks[i].z0),
                   vec3(blocks[i].x1, blocks[i].y1, blocks[i].z1),
                   vec3(blocks[i].r,  blocks[i].g,  blocks[i].b));

    // Generate a vertex array and buffer object to hold these triangles.

    glGenVertexArrays(1, &vao);
    glBindVertexArray(    vao);

    glGenBuffers(1, &vbo);
    glBindBuffer(GL_ARRAY_BUFFER, vbo);
    glBufferData(GL_ARRAY_BUFFER, verts.size() * stride,
                                 &verts.front(), GL_STATIC_DRAW);

    // Initialize a shader to render the vertex array.

    if ((program = init_program("vertex.glsl", "fragment.glsl")))
    {
        glUseProgram(program);

        ProjectionMatrixLoc = glGetUniformLocation(program, "ProjectionMatrix");
        ModelViewMatrixLoc  = glGetUniformLocation(program, "ModelViewMatrix");
        NormalMatrixLoc     = glGetUniformLocation(program, "NormalMatrix");
        LightPositionLoc    = glGetUniformLocation(program, "LightPosition");
        AmbientLightLoc     = glGetUniformLocation(program, "AmbientLight");

        GLint pLoc = glGetAttribLocation(program, "vPosition");
        GLint nLoc = glGetAttribLocation(program, "vNormal");
        GLint cLoc = glGetAttribLocation(program, "vColor");

        glEnableVertexAttribArray(pLoc);
        glEnableVertexAttribArray(nLoc);
        glEnableVertexAttribArray(cLoc);

        glVertexAttribPointer(pLoc, 3, GL_FLOAT, 0, stride, (const void *)  0);
        glVertexAttribPointer(nLoc, 3, GL_FLOAT, 0, stride, (const void *) 12);
        glVertexAttribPointer(cLoc, 3, GL_FLOAT, 0, stride, (const void *) 24);
    }

    position = vec3(0.0, 4.0, 0.0);
    ambient  = vec3(0.1, 0.1, 0.1);
    light    = vec4(0.0, 7.0, 0.0, 1.0);

    glClearColor(0.3f, 0.6f, 0.9f, 0.0f);

    glEnable(GL_DEPTH_TEST);
    glEnable(GL_CULL_FACE);
}

OVR_SDL2_room::~OVR_SDL2_room()
{
    glDeleteProgram(program);

    glDeleteBuffers     (1, &vbo);
    glDeleteVertexArrays(1, &vao);
}

void OVR_SDL2_room::draw()
{
    mat4 P = projection();
    mat4 V = view();

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glUniformMatrix4fv(ProjectionMatrixLoc, 1, GL_TRUE, P);
    glUniformMatrix4fv(ModelViewMatrixLoc,  1, GL_TRUE, V);
    glUniformMatrix3fv(NormalMatrixLoc,     1, GL_TRUE, normal(V));
    glUniform4fv      (LightPositionLoc,    1,          V * light);
    glUniform3fv      (AmbientLightLoc,     1,          ambient);

    glDrawArrays(GL_TRIANGLES, 0, verts.size());
}

//------------------------------------------------------------------------------

int main(int argc, char **argv)
{
    OVR_SDL2_room app;
    app.run();
    return 0;
}

